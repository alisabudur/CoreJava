open ClassDeclaration;;
open MethodDeclaration;;
open FieldDeclaration;;
open TypeDeclaration;;
open ProgramDeclaration;;
open ExpDeclaration;;
open SubtypingUtils;;
open ListUtils;;
open ExpUtils;;
open MethodUtils;;
open WellTypedMethod;;
open WellTypedProgram;;
open WellTypedExp;;

let nameParameter = CJMethodParameter(CJPrimType(CJString), "newName");;
let ageParameter = CJMethodParameter(CJPrimType(CJInt), "newAge");;

let setNameParameterList = CJMethodParameterList([nameParameter; ageParameter]);;
let emptyParameterList = CJMethodParameterList([]);;

let declareStmt = DeclareVarExp(CJClassType(CJPrimType("Person")), "name");;
let varList = VarList([ConstExp(ConstString("name"))]);;
let newStmt = (Exp2(NewExp(CJClassType("Person2"), varList)));;
let assignStmt = AssignExp("name", newStmt);;
let assignStmt2 = AssignExp("newVar", newStmt);;
let compoundStmt = CompoundExp(assignStmt, Exp3(newStmt));;
let compoundStmt2 = CompoundExp(declareStmt, compoundStmt);;
let ifStmt = IfExp(ConstExp(ConstString("name")), compoundStmt2);;

let constExp1 = ConstExp(ConstString("abc"));;
let declareStmt2 = DeclareVarExp(CJClassType(CJClassType("Person")), "a");;
let varList = VarList([constExp1]);;
let methodCallStmt = Exp3(Exp2(MethodCall("a", "setName", varList)));;
let constExp2 = Exp3(Exp(ConstExp(ConstString("ceva"))));;
let compountStmt3 = CompoundExp(declareStmt2, methodCallStmt);;

let setNameMethod = CJMethod(CJClassType(CJClassType("Person")), "setName", setNameParameterList, ifStmt);;
let mainMethod = CJMethod(CJClassType(CJClassType("Person")), "main", emptyParameterList, compountStmt3);;

let methodList = CJMethodList([setNameMethod; mainMethod]);;

let nameField = CJField(CJPrimType(CJString), "name");;
let ageField = CJField(CJPrimType(CJInt), "age");;

let fieldList = CJFieldList([nameField; ageField]);;

let personClass = CJClass("Person", "Object", fieldList, methodList);;
let personClass2 = CJClass("Person2", "Person", CJFieldList([]), methodList);;
let personClass3 = CJClass("Person3", "Person2", CJFieldList([]), methodList);;

let program = CJProgram([personClass; personClass2]);;

let stringProgram = toStringCJProgram(program);;


Printf.printf "%s\n--------------------------\n" stringProgram;;
Printf.printf "Program well typed: %s\n" (string_of_bool (wellTypedProgram program));;
Printf.printf "TransitiveClosure: \n\n%s\n" (toStringInheritancePairs (transitiveClosure(getInheritancePairs program)));;
Printf.printf "Method well typed: %s\n" (string_of_bool (wellTypedSuperExp (getMethodSuperExp setNameMethod) (getMethodTE setNameMethod) program));;
Printf.printf "setNameMethod returned type: %s\n" (toStringCJType (getMethodReturnType setNameMethod));;
Printf.printf "setNameMethod body type: %s\n" (toStringCJType (getMethodBodyType setNameMethod program));;


