open TypeDeclaration;;

type cJField = CJField of (cJType*string);;

type cJFieldList = CJFieldList of cJField list;;

let toStringCJField (f:cJField) = 
	match f with
	| CJField (typ, name) -> String.concat "" [toStringCJType(typ); " "; name];;

let rec toStringCJFieldList (list: cJFieldList) = 
	match list with
	| CJFieldList([]) -> ""
	| CJFieldList([x]) -> String.concat "" [toStringCJField(x); "\n\n"]
	| CJFieldList(x::y) -> String.concat "" [toStringCJField(x); "\n"; toStringCJFieldList(CJFieldList(y))];;

(*let rec check_dup l = match l with
    [] -> false
    | (h::t) ->
       let x = (List.filter (fun x -> x = h) t) in
         if (x == []) then
            check_dup t
         else
       true;;*)

let rec fieldListWellTyped(list: cJFieldList) =
	match list with 
	| CJFieldList([]) -> true
	| CJFieldList([x]) -> true
	| CJFieldList(h::t) -> let x = (List.filter (fun x -> x = h) t) in
         if (x == []) then
						{Printf.printf "%s \n" "x empty"
            fieldListWellTyped(CJFieldList(t));;	}			
         else
						Printf.printf "%s" "x not empty";;
       			false;;