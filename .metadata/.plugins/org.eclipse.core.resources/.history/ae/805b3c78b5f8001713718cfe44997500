open TypeDeclaration;;
open ExpDeclaration;;
open ListUtils;;

type cJMethodParameter = CJMethodParameter of cJType*string;;

type cJMethodParameterList = CJMethodParameterList of cJMethodParameter list;;

type cJMethod = CJMethod of cJType*string*cJMethodParameterList*superExp;;

type cJMethodList = CJMethodList of cJMethod list;;

let toStringCJMethodParameter (p: cJMethodParameter) = 
	match p with
	| CJMethodParameter(tip, name) -> String.concat "" [toStringCJType(tip); " "; name];;

let rec toStringCJMethodParameterList (list: cJMethodParameterList) =
	match list with
	| CJMethodParameterList([]) -> ""
	| CJMethodParameterList([x]) -> String.concat "" [toStringCJMethodParameter(x)]
	| CJMethodParameterList(x::y) -> String.concat "" [toStringCJMethodParameter(x); ", "; toStringCJMethodParameterList(CJMethodParameterList(y))];;

let toStringCJMethod (m: cJMethod) =
	match m with
	| CJMethod(typ, name, paramList, st) -> String.concat "" [toStringCJType(typ); " "; name; "("; toStringCJMethodParameterList(paramList); ") {\n"; toStringSuperExp(st); "\n}\n"];;

let rec toStringCJMethodList (list: cJMethodList) =
	match list with
	| CJMethodList([]) -> ""
	| CJMethodList([x]) -> String.concat "" [toStringCJMethod(x); "\n\n"]
	| CJMethodList(x::y) -> String.concat "" [toStringCJMethod(x); "\n\n"; toStringCJMethodList(CJMethodList(y))];;

let getMethodName(c: cJMethod) = 
	match c with
	| CJMethod(_,name, _, _) -> name;;

let getParameterType(p: cJMethodParameter) = 
	match p with
	| CJMethodParameter(tip, _) -> tip;;

let getParameterName(p: cJMethodParameter) = 
	match p with
	| CJMethodParameter(_, name) -> name;;



let getMethodReturnType(m : cJMethod) = 
	match m with 
	| CJMethod(tip, _, _, _) -> tip;;

let getMethodSuperExp(m : cJMethod) = 
	match m with 
	| CJMethod(_, _, _, superExp) -> superExp;;







					
						