open MethodDeclaration;;
open ProgramDeclaration;;
open TypeDeclaration;;
open ListUtils;;
open ExpUtils;;
open MethodUtils;;
open WellTypedExp;;

let rec wellTypedMethod (m: cJMethod) (teClass: (string*cJType)) (p: cJProgram) =
	Printf.printf "%s\n" (printTE te);;
	 (isSubtype p ((toStringCJType (getMethodBodyType m p)), (toStringCJType (getMethodReturnType m)))) && (wellTypedSuperExp (getMethodSuperExp m) (teClass :: (getMethodTE m)) p);;

let rec wellTypedMethodList (l: cJMethodList) (teClass: (string*cJType)) (p: cJProgram) = 
	match l with 
	| CJMethodList([]) -> true
	| CJMethodList([x]) -> wellTypedMethod x teClass p
	| CJMethodList(h::t) -> (wellTypedMethod h teClass p) && 
													(wellTypedMethodList (CJMethodList(t)) teClass p);