open TypeDeclaration;;
open ExpDeclaration;;
open ListUtils;;

type cJMethodParameter = CJMethodParameter of cJType*string;;

type cJMethodParameterList = CJMethodParameterList of cJMethodParameter list;;

type cJMethod = CJMethod of cJType*string*cJMethodParameterList*superExp;;

type cJMethodList = CJMethodList of cJMethod list;;

let toStringCJMethodParameter (p: cJMethodParameter) = 
	match p with
	| CJMethodParameter(tip, name) -> String.concat "" [toStringCJType(tip); " "; name];;

let rec toStringCJMethodParameterList (list: cJMethodParameterList) =
	match list with
	| CJMethodParameterList([]) -> ""
	| CJMethodParameterList([x]) -> String.concat "" [toStringCJMethodParameter(x)]
	| CJMethodParameterList(x::y) -> String.concat "" [toStringCJMethodParameter(x); ", "; toStringCJMethodParameterList(CJMethodParameterList(y))];;

let toStringCJMethod (m: cJMethod) =
	match m with
	| CJMethod(typ, name, paramList, st) -> String.concat "" [toStringCJType(typ); " "; name; "("; toStringCJMethodParameterList(paramList); ") {\n"; toStringSuperExp(st); "\n}\n"];;

let rec toStringCJMethodList (list: cJMethodList) =
	match list with
	| CJMethodList([]) -> ""
	| CJMethodList([x]) -> String.concat "" [toStringCJMethod(x); "\n\n"]
	| CJMethodList(x::y) -> String.concat "" [toStringCJMethod(x); "\n\n"; toStringCJMethodList(CJMethodList(y))];;


let getMethodName(c: cJMethod) = 
	match c with
	| CJMethod(_,name, _, _) -> name;;

let getParameterType(p: cJMethodParameter) = 
	match p with
	| CJMethodParameter(tip, _) -> tip;;

let getParameterName(p: cJMethodParameter) = 
	match p with
	| CJMethodParameter(_, name) -> name;;

let rec formalParameterList(c: cJMethod) = 
	match c with 
	| CJMethod(_,_, paramList, _) -> paramList;;

let rec formalParameterTypes(l: cJMethodParameterList) = 
	match l with
	| CJMethodParameterList([]) -> []
	| CJMethodParameterList([x]) -> [(getParameterType x)]
	| CJMethodParameterList(h::t) -> (getParameterType h) :: formalParameterTypes(CJMethodParameterList(t))

let getMethodReturnType(m : cJMethod) = 
	match m with 
	| CJMethod(tip, _, _, _) -> tip;;

let getMethodSuperExp(m : cJMethod) = 
	match m with 
	| CJMethod(_, _, _, superExp) -> superExp;;

let rec methodListNotDuplicated(list: cJMethodList) =
	match list with 
	| CJMethodList([]) -> true
	| CJMethodList([x]) -> true
	| CJMethodList(h::t) -> let x = (List.filter (fun x -> getMethodName(x) = getMethodName(h)) t) in
         if (x == []) then
					begin
							(*Printf.printf "%s\n" "x method empty";*)
            	methodListNotDuplicated(CJMethodList(t));
					end						
         else	
					begin	
							(*Printf.printf "%s\n" "x method not empty";*)				
       				false;
					end;;

let rec existMainMethod(list: cJMethodList) = 
	match list with
	| CJMethodList([]) -> true
	| CJMethodList([x]) -> getMethodName(x) = "main"
	| CJMethodList(h::t) -> getMethodName(h) = "main" || existMainMethod(CJMethodList(t));;

let rec getParametersTE(l: cJMethodParameterList) = 
	match l with 
	| CJMethodParameterList([]) -> []
	| CJMethodParameterList([x]) -> [(getParameterName(x), (getParameterType(x)))]
	| CJMethodParameterList(h::t) -> (getParameterName(h), (getParameterType(h))) :: getParametersTE(CJMethodParameterList(t));;

let rec getVariablesTE(e: superExp) = 
	match e with 
	| DeclareVarExp(tip, name) -> [(name, tip)]
	| CompoundExp(e1, e2) -> append (getVariablesTE e1) (getVariablesTE e2)
	|	IfExp(_, e) -> getVariablesTE e
	| IfElseExp(_, e1, e2) -> append (getVariablesTE e1) (getVariablesTE e2)
	| WhileExp(_, e) -> getVariablesTE e
	| _ -> [];;

let getMethodTE(m: cJMethod) = 
	match m with
	| CJMethod(_, _, paramList, exp) -> append (getParametersTE paramList) (getVariablesTE exp);;





					
						