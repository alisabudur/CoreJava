open MethodDeclaration;;
open ProgramDeclaration;;
open TypeDeclaration;;
open ExpUtils;;
open MethodUtils;;
open WellTypedExp;;

let rec wellTypedMethod (m: cJMethod) (teClass: (string*cJType)) (p: cJProgram) =
	let correctSubtyping = isSubtype p ((toStringCJType (getMethodBodyType m p)), (toStringCJType (getMethodReturnType m)))
	let wellTypedMethodExp = (wellTypedSuperExp (getMethodSuperExp m) (getMethodTE m) p)
	 (isSubtype p ((toStringCJType (getMethodBodyType m p)), (toStringCJType (getMethodReturnType m)))) && (wellTypedSuperExp (getMethodSuperExp m) (getMethodTE m) p);;

let rec wellTypedMethodList (l: cJMethodList) (teClass: (string*cJType)) (p: cJProgram) = 
	match l with 
	| CJMethodList([]) -> true
	| CJMethodList([x]) -> wellTypedMethod x p
	| CJMethodList(h::t) -> (wellTypedMethod h p) && 
													(wellTypedMethodList (CJMethodList(t)) teClass p);