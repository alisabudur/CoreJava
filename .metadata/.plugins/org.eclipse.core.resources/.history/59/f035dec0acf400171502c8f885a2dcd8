open FieldDeclaration;;
open MethodDeclaration;;

type cJClass = CJClass of string*string*cJFieldList*cJMethodList;;

let toStringCJClass (c: cJClass) = 
	match c with 
	| CJClass(name, parentName, fieldList, methodList) -> 
		String.concat "" ["class "; name; " extends "; parentName; "{\n\n"; toStringCJFieldList(fieldList); "#\n\n"; toStringCJMethodList(methodList); "}" ];;

let classWellTyped(c: cJClass) = 
	match c with 
	| CJClass(name, parentName, fieldList, methodList) -> fieldListNotDuplicated(fieldList) && methodListNotDuplicated(methodList);;

let getClassName(c: cJClass) = 
	match c with
	| CJClass(name, _, _, _) -> name;;
		
let hasMainMethod(c: cJClass) =
	match c with
	| CJClass(_, _, _, methodList)	-> 	existMainMethod(methodList);;

let getInheritancePairs(c: cJClass): string*string list = 
	match p with 
	| CJClass(child, parent, _, _)